yarn add web3-react-phantom @web3-react/core eventemitter3 @web3-react/types

bgcolor= rgb(28 41 54 )


navbg=rgb(19 28 37)

basefontcolor = #c7f284

disabledfont = rgba(232, 249, 255, .5)

hoverfont disabled = rgba(232,249,255,.8)

disabledbuttonbg =linear-gradient(247.44deg,#c7f284 13.88%,#00bef0 99.28%)

activebuttoncolor = rgb(0 188 240)


font-size: 0.875rem;
    line-height: 1.25rem;

    git remote add origin https://github.com/pishnahadebehtar/Jupiter-DEX-Clone.git

    git push -f origin main


    git pull Jupiter-DEX-Clone main --allow-unrelated-histories
git remote add origin https://github.com/pishnahadebehtar/jupiter.git




how to use git for pushing the site:


Great to hear that your project is now visible on your GitHub Pages site! To reflect changes in your project on the GitHub Pages site, you'll need to follow a similar process each time you update your code. Here's a step-by-step guide:

### Steps to Update Your GitHub Pages Site

1. **Make Changes Locally**:
   - Work on your project and make any necessary changes to your code.

2. **Stage and Commit Your Changes**:
   - Add the changes to the staging area:
     ```bash
     git add .
     ```
   - Commit your changes with a descriptive message:
     ```bash
     git commit -m "Describe the changes you made"
     ```

3. **Push Changes to GitHub**:
   - Push your changes to the main branch (or master, depending on your setup):
     ```bash
     git push origin main
     ```
   - Replace `main` with `master` if your default branch is `master`.

4. **Deploy to GitHub Pages**:
   - Run the deploy script to build your project and update the GitHub Pages site:
     ```bash
     npm run deploy
     ```

5. **Verify the Update**:
   - Visit your GitHub Pages site to ensure that the changes are reflected. It might take a few minutes for the changes to appear.

### Summary of Commands:
- `git add .`
- `git commit -m "Your commit message"`
- `git push origin main` (or `master`)
- `npm run deploy`

### Additional Tips:

- **Automate Deployment**: If you frequently update your project, consider automating the deployment process using GitHub Actions or another CI/CD tool. This can streamline the process and ensure your site is always up-to-date with the latest changes.

- **Check for Errors**: Always check the console for errors after deploying to ensure everything is working as expected.

By following these steps, you can keep your GitHub Pages site in sync with your local project changes. If you have any more questions or need further assistance, feel free to ask!


**** how to Automate Deployment using GitHub Actions? ****

Certainly! Automating the deployment of your React app to GitHub Pages can save you time and ensure that your site is always up-to-date with the latest changes. One way to achieve this is by using GitHub Actions, which is a powerful CI/CD tool integrated with GitHub.

### Automating Deployment with GitHub Actions

Here's how you can set up a GitHub Actions workflow to automatically deploy your React app to GitHub Pages whenever you push changes to your repository:

1. **Create a Workflow File**:
   - In your repository, create a new directory called `.github/workflows`.
   - Inside this directory, create a new file named `deploy.yml`.

2. **Add Workflow Configuration**:
   - Open `deploy.yml` and add the following configuration:

   ```yaml
   name: Deploy to GitHub Pages

   on:
     push:
       branches:
         - main  # Change to 'master' if your default branch is 'master'

   jobs:
     build-and-deploy:
       runs-on: ubuntu-latest

       steps:
         - name: Checkout code
           uses: actions/checkout@v2

         - name: Set up Node.js
           uses: actions/setup-node@v2
           with:
             node-version: '16'  # Use the Node.js version compatible with your project

         - name: Install dependencies
           run: npm install

         - name: Build the project
           run: npm run build

         - name: Deploy to GitHub Pages
           uses: peaceiris/actions-gh-pages@v3
           with:
             github_token: ${{ secrets.GITHUB_TOKEN }}
             publish_dir: ./build
   ```

3. **Commit and Push the Workflow**:
   - Add, commit, and push the `deploy.yml` file to your repository:
     ```bash
     git add .github/workflows/deploy.yml
     git commit -m "Add GitHub Actions workflow for deployment"
     git push origin main
     ```

4. **Verify the Workflow**:
   - Once you push the workflow file, GitHub Actions will automatically trigger the workflow whenever you push changes to the specified branch (e.g., `main`).
   - You can monitor the workflow's progress in the "Actions" tab of your GitHub repository.

### How It Works:

- **Trigger**: The workflow is triggered by a push to the `main` branch (or `master`, if that's your default branch).
- **Steps**:
  - **Checkout**: The code is checked out from the repository.
  - **Setup Node.js**: The specified version of Node.js is set up.
  - **Install Dependencies**: Dependencies are installed using `npm install`.
  - **Build**: The project is built using `npm run build`.
  - **Deploy**: The built files are deployed to the `gh-pages` branch using the `peaceiris/actions-gh-pages` action.

By setting up this workflow, your React app will be automatically deployed to GitHub Pages every time you push changes to your repository. This ensures that your site is always up-to-date without manual intervention. If you have any questions or need further customization, feel free to ask!

